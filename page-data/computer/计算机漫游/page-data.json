{"componentChunkName":"component---src-templates-article-tsx","path":"/computer/计算机漫游/","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"html":"<h3>计算机基本概念</h3>\n<p>计算机的组成是由软件和硬件组成的，计算机中的信息就是由位（比特） + 上下文而组成的。\n所谓的 <code class=\"language-text\">位</code> 指的是计算机中的由 0 或 1 组成的序列，每 8 位组成的序列称为一个 <code class=\"language-text\">字节</code>。字节组成了计算机内的文本文件。\n大部分的现代计算机采用 <code class=\"language-text\">ASCLL</code> 码来表示文本字符。出了文本文件外的其他所有文件都为 <code class=\"language-text\">二进制文件</code>。</p>\n<h4>程序编译过程</h4>\n<p>在计算机中的程序文件，例如 hello.c 会经过以下几个步骤翻译成计算机可执行文件（使用 GCC）</p>\n<ol>\n<li>经过预处理器（CPP）将引入的代码插入程序文本中，转换为 hello.i 的文本文件</li>\n<li>经过编译器（CCL）将文件翻译成汇编语言 hello.s 的文本文件</li>\n<li>经过汇编器（AS）将文件转换成一个<code class=\"language-text\">可定位目标程序</code>的二进制文件</li>\n<li>经过链接器（LD）将标准库中的某些方法链接到<code class=\"language-text\">可定位目标程序</code>文件中，转换为 hello 的可执行程序。例如 printf.o</li>\n</ol>\n<p>了解编译系统的好处：</p>\n<ul>\n<li>优化程序性能</li>\n<li>理解链接时出现的错误</li>\n<li>避免安全漏洞</li>\n</ul>\n<h4>计算机系统的硬件组成</h4>\n<ol>\n<li>总线</li>\n</ol>\n<p>总线是一组电子管道，贯穿了整个计算机系统。它能够携带字节信息在各个部分中进行信息传输。总线携带的信息为定长的字节块。平时我们所说的 64 位（8 个字节）、32 位操作系统（4 个字节）估计就是这么来的。</p>\n<ol start=\"2\">\n<li>I/O 设备</li>\n</ol>\n<p>计算机的 I/O 设备是与外界通信的渠道，例如 鼠标、键盘、显示器、网络、声音 等等。每个 I/O 设备都会有控制器或者适配器与总线相连。</p>\n<ol start=\"3\">\n<li>主存</li>\n</ol>\n<p>主存的由一组 <code class=\"language-text\">动态随机存取存储器（DRAM）</code> 芯片组成的，主要用于临时存放程序和程序处理的数据</p>\n<ol start=\"4\">\n<li>处理器\n处理器为 <code class=\"language-text\">中央处理单元（CPU）</code>。是解释（或执行）存储在主存中指令的引擎。处理器的核心是一个大小为一个字的存储设备（寄存器），称为程序计数器（PC），负责指向主存中的某条机器语言指令。</li>\n</ol>\n<h4>运行 hello 可执行程序</h4>\n<ol>\n<li>首先会通过 I/O 设备在 shell 程序中输入 ./hello，会经过总线将这条指令传输到 CPU，CPU 再将其保存至主存中。</li>\n<li>当按下回车执行文件时，shell 会执行一系列指令从磁盘中将程序和程序数据复制到主存中，进而执行。这里通过 <code class=\"language-text\">直接存储器存储（DMA）</code>可以将数据不经过 CPU 直接从磁盘中复制到主存中。</li>\n<li>当程序被加载到主存中后，处理器就开始执行程序，会将主存中的程序执行的结果复制到 <code class=\"language-text\">寄存器文件</code> 进而复制到 I/O 的显示器。</li>\n</ol>\n<h4>高速缓存</h4>\n<p>从运行 hello 程序可以看到有些不必要的复制操作其实是很浪费性能的，所以当有高速缓存时会提高程序的性能。\n下面介绍了每个存储位置，从上到下性能降低、造价更低。上一层是下一层的高速缓存\n存储器层次架构：</p>\n<ul>\n<li>L0: 寄存器</li>\n<li>L1: L1 高速缓存（SRAM）</li>\n<li>L2: L2 高速缓存（SRAM）</li>\n<li>L3: L3 高速缓存（SRAM）</li>\n<li>L4: 主存（DRAM）</li>\n<li>L5: 本地二级存储（磁盘）</li>\n<li>L6: 远程二级存储（分布式文件系统、web 服务器）</li>\n</ul>\n<h4>操作系统</h4>\n<p>操作系统可以看作为应用与硬件中的一层软件，它的两个基本功能为：</p>\n<ol>\n<li>防止硬件被失控的程序滥用</li>\n<li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的地基硬件设备。</li>\n</ol>\n<p>操作系统通过抽象出 <code class=\"language-text\">文件</code> <code class=\"language-text\">进程</code> <code class=\"language-text\">虚拟内存</code> 来实现这两个功能。\n其中文件是对 I/O 设备的抽象\n虚拟内存是为主存和磁盘 I/O 的抽象\n进程则是对 处理器、主存和 I/O 设备的抽象</p>\n<h5>进程</h5>\n<p>进程是操作系统对一个正在运行的程序的一种抽象。而并发运行则是说一个进程的指令和两一个进程的指令是交错执行的。</p>\n<h5>线程</h5>\n<p>通常我们认为一个进程只有单一的控制流，但在现代的计算机中，一个进程实际上可以由多个称为线程的执行单元组成。线程运行在进程的上下文中，享受着同样的全局变量。</p>\n<h5>虚拟内存</h5>\n<p>虚拟内存为每个进程提供了一个假象，即每个进程都在独立的占用、使用主存。每个进程看到的内存都是一致的，称为虚拟地址空间。</p>\n<h5>文件</h5>\n<p>文件的本质是字节序列，操作系统为了让用户更容易接受，而抽象出文件的概念。</p>","frontmatter":{"title":"计算机漫游","path":null,"date":"2020-01-10T10:00:00.000Z","tags":["《深入理解计算机系统》"],"layout":"post","image":null,"author":"云浅","category":{"title":"计算机","name":"computer"}}}}}