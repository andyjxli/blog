{"componentChunkName":"component---src-templates-article-tsx","path":"/algorithm/longestPalindrome/","result":{"pageContext":{"html":"<h2>题目描述</h2>\n<blockquote>\n<p>最长回文字符串: 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。例如：输入: \"babad\"； 输出: \"bab\"； 注意: \"aba\" 也是一个有效答案。</p>\n</blockquote>\n<p>根据题目可以了解到回文字符串的定义是指给定的字符串翻转后与原字符串相同。</p>\n<h2>解决方案</h2>\n<p>下面我们给出 <code class=\"language-text\">暴力破解</code> 以及 <code class=\"language-text\">动态规划</code> 的解决方案</p>\n<h3>暴力破解</h3>\n<blockquote>\n<p>很明显，暴力法将选出所有子字符串可能的开始和结束位置，并检验它是不是回文。</p>\n</blockquote>\n<h4>算法逻辑</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {string} str\n * @return {string}\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">longestPalindrome</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> palindrome <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 选取 i - j 中间的子字符串</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> curr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> reverse <span class=\"token operator\">=</span> curr\n        <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr <span class=\"token operator\">===</span> reverse <span class=\"token operator\">&amp;&amp;</span> palindrome<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> curr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> palindrome <span class=\"token operator\">=</span> curr\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> palindrome\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>复杂度分析</h4>\n<ul>\n<li>时间复杂度：O(n^3)，假设 n 是输入字符串的长度，则 n(n-1) / 2 为此类子字符串(不包括字符本身是回文的一般解法)的总数。因为验证每个子字符串需要 O(n) 的时间，所以运行时间复杂度是 O(n^3)</li>\n<li>空间复杂度：O(1)。</li>\n</ul>\n<h4>动态规划</h4>\n<blockquote>\n<p>关于动态规划的初步认识：<a href=\"https://www.zhihu.com/question/23995189/answer/613096905\">什么是动态规划（Dynamic Programming）？</a>。</p>\n</blockquote>\n<p>符合动态规划的几个要点</p>\n<ul>\n<li>无后效性\n如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。也就是说，一旦 f(n) 确定了，就不再需要关心他是怎么得出来的。</li>\n<li>最优子结构\n大问题的最优解可以由小问题的最优解推出，这个性质叫做“最优子结构性质”。</li>\n</ul>\n<p>回到题目当中，我们要求到最长的回文字符串。比如 “acbbbca”，如果我们知道 bbb 是回文，那么肯定能确定 cbbbc 也是回文。因为 bbb 的两边是相等的。所以我们可以将最长回文字符串拆解成 从最短的回文字符串开始找起，直到找到最长的回文字符串。</p>\n<p>假设给定一个字符串 S， L 为当前字符串 P 的长度。 i 为 当前字符串 P 在 S 的起始下标， j 为当前字符串 P 在 S 的结束下标。例如 S = acbbbca, P = bbb, 那么 L = 3; i = 2; j = 4。 那么我们可以得出关系 L = j - i + 1 => j = L + 1 - 1.</p>\n<p>根据上面的定义，我们要确定 P(i, j) 是否为回文字符串的条件是 P(i+1,j−1) 为回文字符串并且 S[i] === S[j]</p>\n<p>这里我们就能很轻松的想到要先确定 一字母 与 二字母 的回文。然后找到 三字母 的回文，以此类推，直到结束.</p>\n<h4>算法逻辑</h4>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">longestPalindromeByDP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> str\n\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 创建 dp 二维数组</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// L 代表当前回文字符串的长度，二维数组的下标 为 (i, j)。例如（0,0）表示字符串第一位，L 为 1；(1, 2)表示字符串 2-3位，L 为 2.</span>\n  <span class=\"token comment\">// 所以 L = j - i + 1 =>  j = L + i - 1</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token constant\">L</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token constant\">L</span> <span class=\"token operator\">&lt;=</span> len<span class=\"token punctuation\">;</span> <span class=\"token constant\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> len <span class=\"token operator\">-</span> <span class=\"token constant\">L</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> j <span class=\"token operator\">=</span> <span class=\"token constant\">L</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">L</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token constant\">L</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token constant\">L</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>复杂度分析</h4>\n<ul>\n<li>时间复杂度：O(n^2)，这里给出我们的运行时间复杂度为 O(n^2)。</li>\n<li>空间复杂度：O(n^2)该方法使用 O(n^2)的空间来存储表。</li>\n</ul>","frontmatter":{"title":"最长回文字符串","path":"longestPalindrome","date":"2019-12-10T00:00:00.000Z","tags":["leetcode","DP","javascript"],"layout":null,"image":"","author":"李嘉欣","category":{"title":"算法","name":"algorithm"}}}}}