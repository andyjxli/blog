{"componentChunkName":"component---src-templates-article-tsx","path":"/frontend/useIntersectionObserver/","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"html":"<h2>前言</h2>\n<p>本文使用 React Hooks 构建一个监听 DOM 元素曝光的 Custom Hooks，主要功能是监听 DOM 元素是否在规定内曝光，从而可以完成曝光打点。</p>\n<p>过去我们监听 DOM 元素都是通过监听 scroll 事件来监听目标元素是否在可视区，这样我们需要获取目标元素的一些数据。这样似乎很麻烦，而通过 Intersection Observer 来完成监听，更加方便、友好。</p>\n<h2>Intersection Observer</h2>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver\">MDN</a>: IntersectionObserver 接口 (从属于 Intersection Observer API) 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(viewport)交叉状态的方法。祖先元素与视窗(viewport)被称为根(root)。</p>\n</blockquote>\n<p>其他相关概念可见 <a href=\"https://juejin.im/post/5a7973575188257a5911a749\">谈谈 IntersectionObserver 懒加载</a> 、 <a href=\"http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html\">IntersectionObserver API 使用教程</a></p>\n<p>简单来说这个对象会观察目标元素，当目标元素与它的祖先元素或者可视区发生交叉时，会触发回调函数。</p>\n<p>通过这个对象我们可以监听需要曝光打点的元素，更方便的实现打点。同时我们不需要监听 scroll 事件以及相对应的 DOM 操作，减少了性能的开销。</p>\n<h2>Intersection Observer 在 React 中的实践</h2>\n<p>为了能够在不同的场景中使用，我们可以将其封装成 HOOKS，更方便的调用该方法</p>\n<h4>1. 定义 useIntersectionObserver 函数</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// useIntersectionObserver.ts</span>\n<span class=\"token comment\">// 定义参数函数类型以及返回值类型</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useCallback<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\ntype NumberList <span class=\"token operator\">=</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntype ObserverList <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">>></span>\ntype <span class=\"token function-variable function\">CallbackFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">indexList<span class=\"token punctuation\">:</span> NumberList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\ntype ResultType <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UseIntersectionObserver</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">observerList<span class=\"token punctuation\">:</span> ObserverList<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">:</span> CallbackFunction<span class=\"token punctuation\">,</span>\n  infinite<span class=\"token punctuation\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  opt<span class=\"token punctuation\">:</span> IntersectionObserverInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ResultType <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// list 为需要监听的元素列表。setList做为UseIntersectionObserver函数的返回值，可以让调用者修改需要监听的 list</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>ObserverList<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>observerList<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// intersectionObserver： 观察者对象</span>\n  <span class=\"token keyword\">let</span> intersectionObserver<span class=\"token punctuation\">:</span> IntersectionObserver <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>setList<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> useIntersectionObserver <span class=\"token operator\">=</span> UseIntersectionObserver\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useIntersectionObserver</code></pre></div>\n<p>UseIntersectionObserver 函数参数：</p>\n<ul>\n<li>observerList： 由被观察目标所组成的数组，数组项是由 React.createRef 构建出来的对象</li>\n<li>callback: 当目标元素被曝光所需要触发的函数，该函数接受一个参数 indexList，由被曝光元素在 observerList 数组中的索引组成</li>\n<li>infinite：是否持续观察目标元素，默认值为 false。（因为曝光打点一般只需上报一次）</li>\n<li>opt：可以自定义曝光条件（值的构成参考 MDN），默认为{ threshold: [1] }，只有当目标元素完全暴露在可视区内才触发回调</li>\n</ul>\n<p>UseIntersectionObserver 返回值:</p>\n<ul>\n<li>返回一个数组，数组的第一项元素由 React 的 useState 所返回。</li>\n</ul>\n<h4>2. 实现监听</h4>\n<blockquote>\n<p>定义 observeExposure 函数</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// UseIntersectionObserver</span>\n\n<span class=\"token keyword\">const</span> observeExposure <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">:</span> ObserverList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>使用 useCallback 减少不必要的重复函数声明</p>\n<blockquote>\n<p>判断浏览器环境以及 list 的是否为空</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> IntersectionObserver <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current browser does not support IntersectionObserver '</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></code></pre></div>\n<ul>\n<li>目标主流浏览器都已经支持该对象，但是还是兼容一些低版本浏览器</li>\n<li>当 list 为空列表是直接 return</li>\n</ul>\n<blockquote>\n<p>构造新的观察者实例</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 当观察者存在时销毁该对象</span>\nintersectionObserver <span class=\"token operator\">&amp;&amp;</span> intersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 构造新的观察者实例</span>\nintersectionObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 保存本次监听被曝光的元素</span>\n  <span class=\"token keyword\">let</span> activeList<span class=\"token punctuation\">:</span> NumberList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 递归每一个本次被监听对象，如果按照曝光条件出现在可视区，则调用callback函数，并且取消监听</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entrie</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 找出本次被监听对象在list中的索引</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> entrie<span class=\"token punctuation\">.</span>target\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 防止意外发生</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token comment\">// isIntersecting是每个被监听的元素所自带的属性，若为ture，则表示被曝光</span>\n    <span class=\"token comment\">// 并且未被曝光过</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entrie<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 保存本次曝光元素索引</span>\n      activeList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 解除观察， 若需要无限观察则不取消监听</span>\n      <span class=\"token operator\">!</span>infinite <span class=\"token operator\">&amp;&amp;</span>\n        intersectionObserver <span class=\"token operator\">&amp;&amp;</span>\n        intersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// callback函数</span>\n  activeList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>activeList<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>使用 intersectionObserver 监听 list 中的元素</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 递归观察每一个元素</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  item<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&amp;&amp;</span>\n    intersectionObserver <span class=\"token operator\">&amp;&amp;</span>\n    intersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 可以兼容直接传入DOM节点。</span>\n  <span class=\"token comment\">// if((&lt;React.RefObject&lt;any>>item).current) {</span>\n  <span class=\"token comment\">//   intersectionObserver.observe((&lt;React.RefObject&lt;any>>item).current)</span>\n  <span class=\"token comment\">// } else if ((&lt;HTMLElement>item)) {</span>\n  <span class=\"token comment\">//   intersectionObserver.observe((&lt;HTMLElement>item))</span>\n  <span class=\"token comment\">// }</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>3. 当每次被暴露的 setList 被调用时会使 list 被改变，此时需要重新监听</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">observeExposure</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 当 umount 时取消链接</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    intersectionObserver <span class=\"token operator\">&amp;&amp;</span> intersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>4. 完整代码实现</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useCallback<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\ntype NumberList <span class=\"token operator\">=</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntype ObserverList <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">>></span>\ntype <span class=\"token function-variable function\">CallbackFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">indexList<span class=\"token punctuation\">:</span> NumberList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\ntype ResultType <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">/**\n * UseIntersectionObserver\n * @param observerList 由被观察目标所组成的数组，数组项是由React.createRef构建出来的对象\n * @param callback 当目标元素被曝光所需要触发的函数，该函数接受一个参数indexList，由被曝光元素在observerList数组中的索引组成\n * @param infinite 是否持续观察目标元素，默认值为false。（因为曝光打点一般只需上报一次）\n * @param opt 可以自定义曝光条件（值的构成参考MDN），默认为{ threshold: [1] }，只有当目标元素完全暴露在可视区内才触发回调\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">UseIntersectionObserver</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">observerList<span class=\"token punctuation\">:</span> ObserverList<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">:</span> CallbackFunction<span class=\"token punctuation\">,</span>\n  infinite<span class=\"token punctuation\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  opt<span class=\"token punctuation\">:</span> IntersectionObserverInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ResultType <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// list 为需要监听的元素列表。setList做为UseIntersectionObserver函数的返回值，可以让调用者修改需要监听的 list</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>ObserverList<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>observerList<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// intersectionObserver： 观察者对象</span>\n  <span class=\"token keyword\">let</span> intersectionObserver<span class=\"token punctuation\">:</span> IntersectionObserver <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">const</span> observeExposure <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">:</span> ObserverList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>IntersectionObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Current browser does not support IntersectionObserver '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token comment\">// 当观察者存在时销毁该对象</span>\n    intersectionObserver <span class=\"token operator\">&amp;&amp;</span> intersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 构造新的观察者实例</span>\n    intersectionObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 保存本次监听被曝光的元素</span>\n      <span class=\"token keyword\">let</span> activeList<span class=\"token punctuation\">:</span> NumberList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n      <span class=\"token comment\">// 递归每一个本次被监听对象，如果按照曝光条件出现在可视区，则调用callback函数，并且取消监听</span>\n      entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entrie</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 找出本次被监听对象在list中的索引</span>\n        <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>\n          <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>current <span class=\"token operator\">===</span> entrie<span class=\"token punctuation\">.</span>target\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 防止意外发生</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n        <span class=\"token comment\">// isIntersecting是每个被监听的元素所自带的属性，若为ture，则表示被曝光</span>\n        <span class=\"token comment\">// 并且未被曝光过</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entrie<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 保存本次曝光元素索引</span>\n          activeList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\n          <span class=\"token comment\">// 解除观察， 若需要无限观察则不取消监听</span>\n          <span class=\"token operator\">!</span>infinite <span class=\"token operator\">&amp;&amp;</span>\n            intersectionObserver <span class=\"token operator\">&amp;&amp;</span>\n            intersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// callback函数</span>\n      activeList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>activeList<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span>\n\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      item<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&amp;&amp;</span>\n        intersectionObserver <span class=\"token operator\">&amp;&amp;</span>\n        intersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 可以兼容直接传入DOM节点。</span>\n      <span class=\"token comment\">// if((&lt;React.RefObject&lt;any>>item).current) {</span>\n      <span class=\"token comment\">//   intersectionObserver.observe((&lt;React.RefObject&lt;any>>item).current)</span>\n      <span class=\"token comment\">// } else if ((&lt;HTMLElement>item)) {</span>\n      <span class=\"token comment\">//   intersectionObserver.observe((&lt;HTMLElement>item))</span>\n      <span class=\"token comment\">// }</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">observeExposure</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 当 umount 时取消链接</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      intersectionObserver <span class=\"token operator\">&amp;&amp;</span> intersectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>setList<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> useIntersectionObserver <span class=\"token operator\">=</span> UseIntersectionObserver\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useIntersectionObserver</code></pre></div>\n<br>\n<h2>使用案例</h2>\n<blockquote>\n<p>实现一个简单的商品列表曝光打点的案例</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> Card <span class=\"token keyword\">from</span> <span class=\"token string\">'components/goods-card/goods-card'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getSinglePromotionList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../page_components/promotion/redux/creator'</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState<span class=\"token punctuation\">,</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> useIntersectionObserver <span class=\"token keyword\">from</span> <span class=\"token string\">'page_components/promotion/useIntersectionObserver'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">List</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> info<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">;</span> getData<span class=\"token punctuation\">:</span> any <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> info<span class=\"token punctuation\">,</span> getData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token comment\">// 被监听元素的列表</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>refList<span class=\"token punctuation\">,</span> setRefList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> callback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">indexList<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>indexList<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 调用</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useIntersectionObserver</span><span class=\"token punctuation\">(</span>refList<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 当refList发生改变时，调用我们的Hook返回的方法以更新需要监听的元素</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setList</span><span class=\"token punctuation\">(</span>refList<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>refList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 当数据发生改变时，重新生成RefList</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> list<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setRefList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>info<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 发送请求，获取商品数据</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> display<span class=\"token punctuation\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> flexWrap<span class=\"token punctuation\">:</span> <span class=\"token string\">'wrap'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>info<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Card card<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    info<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>promotionStore<span class=\"token punctuation\">.</span>singlePromotionInfo<span class=\"token punctuation\">,</span>\n    userInfo<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">getData</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSinglePromotionList</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> silence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>案例效果</p>\n</blockquote>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/5/16/16ac0bbcd1c49ca4?w=600&#x26;h=329&#x26;f=gif&#x26;s=1867334\"></p>\n<p>从动图可以看出，当 card 被曝光时打印出索引值，而已经被曝光的值不会再次曝光。</p>\n<br>\n<br>\n<p>本文完～\n更多文章。 <a href=\"https://juejin.im/user/5800d4d367f3560058ab40e0\">我的掘金～</a>\n如有疑问，欢迎指出～</p>","frontmatter":{"title":"useIntersectionObserver","path":null,"date":"2019-03-10T10:00:00.000Z","tags":["Time"],"layout":"post","image":"img/xiyizhou.jpg","author":"XiYiZi","category":{"title":"前端","name":"frontend"}}}}}